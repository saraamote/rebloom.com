{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<divitemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  <div class="grid">
    <div class="grid-item text-center item-product-title">
      {% if collection.handle %}
        <a href="{{ collection.url }}" class="h3 collection-title" item-prop="collection">{{ collection.title }}</a>
      {% endif %}
      <h1 itemprop="name">{{ product.title }}</h1>
      {% if settings.product_vendor_enable %}
        <h2 class="product-meta" itemprop="brand">{{ product.vendor }}</h2>
      {% endif %}
    </div>

    <div class="grid-item medium--four-sixths large--four-sixths push--one-sixth item-product-photo">
      <div class="product-photo-container" id="productPhoto">
        {% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="productPhotoImg">
      </div>
    </div>

    <div class="grid-item medium--one-sixth large--one-sixth push--one-sixth item-product-thumbnails">
      {% comment %}
        Create thumbnails if we have more than one product image
      {% endcomment %}
      {% if product.images.size > 1 %}
        <ul class="product-photo-thumbs" id="productThumbs">

          {% for image in product.images %}
            <li>
              {% if image == featured_image %}
                <a href="{{ image.src | img_url: 'large' }}" class="product-photo-thumb active">
                  <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
                </a>
              {% else %}
                <a href="{{ image.src | img_url: 'large' }}" class="product-photo-thumb">
                  <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
                </a>
              {% endif %}
            </li>
          {% endfor %}
        </ul>
      {% endif %}
    </div>

    <div class="rte grid-item small--one-whole five-sixths push--large--one-twelfth push--medium--one-twelfth text-center item-product-description rte" itemprop="description">
      {{ product.description }}
    </div>

    <div class="grid-item item-product-info">
      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        {% comment %}
          Get first variant, or deep linked one
        {% endcomment %}
        {% assign variant = product.selected_or_first_available_variant %}

        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

        {% comment %}
          ID addToCartForm is a selector for the ajaxify cart plugin
        {% endcomment %}
        <form class="form-add-to-cart form-horizontal" action="/cart/add" method="post" enctype="multipart/form-data" id="addToCartForm">

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid

          {% endcomment %}
          <select name="id" id="productSelect" class="product-variants">
            {% for variant in product.variants %}
              {% if variant.available %}

                {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {% endcomment %}
                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                </option>
              {% endif %}
            {% endfor %}
          </select>

          {% if settings.product_quantity_enable %}
            <div class="qty-container">
              <label for="quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
              <input type="number" id="quantity" name="quantity" value="1" min="1" class="quantity-selector">
            </div>
          {% endif %}

          {% comment %}
            Optionally show the 'compare at' or original price of the product.
          {% endcomment %}

          {% assign variant = product.selected_or_first_available_variant %}

          <div class="form-item-container price-container">
            {% if product.compare_at_price > variant.price %}
              <span class="compare-price" id="comparePrice">
                {% include 'price' with variant.compare_at_price_max %}
              </span>
            {% endif %}

            <span id="productPrice" class="product-price" itemprop="price">
              {% include 'price' with variant.price %}
            </span>
          </div>

          <div class="form-item-container add-to-cart-container">
            <button type="submit" name="add" id="addToCart" class="btn btn-add-to-cart ">
              <span class="icon-fallback-text out-of-stock-icon-wrapper">
                <span class="icon icon-error" aria-hidden="true"></span>
              </span>
              <span id="addToCartText">{{ 'products.product.add_to_cart' | t }}</span>
            </button>
            <div class="low-stock-container icon-fallback-text">
              <span class="icon icon-warning" aria-hidden="true"><span class="fallback-text">{{ 'products.product.low_stock_warning' | t }}</span></span>
              <span id="variantQuantity" class="variant-quantity"></span>
            </div>

          <!-- chargebee -->

          {% assign cb = product.metafields.chargebee %}

          {% unless cb == empty %}

          <a href="{{cb.cb_url}}" class="btn">Subscribe</a>

          {% endunless %}

          <!-- chargebee -->

          </div>
        </form>
      </div>
    </div>

    {% if settings.social_sharing_products %}
      <div class="grid-item text-center item-social-sharing">
        {% include 'social-sharing' %}
      </div>
    {% endif %}
  </div>

  {% if settings.related_products_enable and template != 'index' %}
    {% include 'related-products' %}
  {% endif %}
</div>


{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS below as you need. This is only needed on pages where
  product variants are accessible, so doesn't need to live in theme.liquid.

  Currently, the code below does:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  Shopify.Image.preload({{ product.images | json }}, 'large');

  var selectCallback = function(variant, selector) {
    timber.productPage({
      moneyFormat: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>
